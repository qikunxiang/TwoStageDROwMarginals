classdef TSDROMScheduling < TSDROMInstance
    % Class for the two-stage distributionally robust multi-product assembly problem with marginal constraints
    
    properties(SetAccess = protected, GetAccess = public)
        % Number of tasks
        task_num;

        % Maximum time window
        time_max;

        % Vector containing the weights of the delays
        delay_weights;
    end
    
    methods(Access = public)
        function obj = TSDROMScheduling(uncertain, time_max, delay_weights)
            % Constructor
            % Inputs: 
            %   time_max: maximum time window
            %   delay_weights: vector containing the weights of the delays

            task_num = uncertain.num;
            assert(size(delay_weights, 1) == task_num && size(delay_weights, 2) == 1, 'delay_weights mis-specified');

            st1_deci_num = task_num;
            st1_obj = zeros(task_num, 1);
            st1_constr_num_in = 1;
            st1_constr_mat_in = sparse(ones(1, task_num));
            st1_constr_rhs_in = time_max;
            st1_constr_num_eq = 0;
            st1_constr_mat_eq = sparse(0, task_num);
            st1_constr_rhs_eq = zeros(0, 1);
            st2_deci_num = task_num;
            st2_obj = delay_weights;
            st2_constr_num_in = task_num;
            st2_constr_mat_in = sparse( ...
                [(1:task_num)'; (2:task_num)'], ...
                [(1:task_num)'; (1:task_num - 1)'], ...
                [-ones(task_num, 1); ones(task_num - 1, 1)], ...
                task_num, task_num);
            st2_constr_rhs_act_in = speye(task_num);
            st2_constr_rhs_unc_in = -speye(task_num);
            st2_constr_rhs_itc_in = zeros(task_num, 1);
            st2_constr_num_eq = 0;
            st2_constr_mat_eq = sparse(0, task_num);
            st2_constr_rhs_act_eq = sparse(0, task_num);
            st2_constr_rhs_unc_eq = sparse(0, task_num);
            st2_constr_rhs_itc_eq = zeros(0, 1);

            obj@TSDROMInstance( ...
                uncertain, ...
                st1_deci_num, ...
                st1_obj, ...
                st1_constr_num_in, ...
                st1_constr_mat_in, ...
                st1_constr_rhs_in, ...
                st1_constr_num_eq, ...
                st1_constr_mat_eq, ...
                st1_constr_rhs_eq, ...
                st2_deci_num, ...
                st2_obj, ...
                st2_constr_num_in, ...
                st2_constr_mat_in, ...
                st2_constr_rhs_act_in, ...
                st2_constr_rhs_unc_in, ...
                st2_constr_rhs_itc_in, ...
                st2_constr_num_eq, ...
                st2_constr_mat_eq, ...
                st2_constr_rhs_act_eq, ...
                st2_constr_rhs_unc_eq, ...
                st2_constr_rhs_itc_eq);

            obj.task_num = task_num;
            obj.time_max = time_max;
            obj.delay_weights = delay_weights;
            obj.st2d_proj_lb = zeros(obj.unc_num, 1);
            obj.st2d_proj_ub = flipud(cumsum(flipud(obj.delay_weights)));
        end
    end
end

